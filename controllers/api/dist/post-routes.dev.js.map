{"version":3,"sources":["post-routes.js"],"names":["router","require","Router","User","Post","Comment","get","req","res","findAll","attributes","include","model","as","dbPostData","status","json","console","log","error","message","findOne","where","id","params","post","create","title","body","user_id","session","put","update","returning","rowsUpdated","updatedPost","destroy","rowsDeleted","module","exports"],"mappings":"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","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User, Post, Comment } = require(\"../../models/comment.js\");\r\n\r\n\r\n//get all the posts\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const dbPostData = await Post.findAll({\r\n      attributes: [\"id\", \"title\", \"body\", \"user_id\"],\r\n      include: [\r\n        {\r\n          model: Comment,\r\n          as: \"comments\",\r\n          attributes: [\"id\", \"comment_text\", \"user_id\"],\r\n        },\r\n      ],\r\n    });\r\n    res.status(200).json(dbPostData);\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n//get post by id\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const dbPostData = await Post.findOne({\r\n      where: {\r\n        id: req.params.id,\r\n      },\r\n      attributes: [\"id\", \"title\", \"body\", \"user_id\"],\r\n      include: [\r\n        {\r\n          model: Comment,\r\n          as: \"comments\",\r\n          attributes: [\"id\", \"comment_text\", \"user_id\"],\r\n        },\r\n      ],\r\n    });\r\n    if (!dbPostData) {\r\n      res.status(404).json({ message: \"No Post found with this id\" });\r\n      return;\r\n    }\r\n    res.status(200).json(dbPostData);\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Create a new post\r\nrouter.post(\"/\", async (req, res) => {\r\n    try {\r\n      const post = await Post.create({\r\n        title: req.body.title,\r\n        body: req.body.body,\r\n        user_id: req.session.user_id,\r\n      });\r\n      res.status(201).json(post);\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: \"Internal Server Error\" });\r\n    }\r\n  });\r\n  \r\n  // Update a post\r\n  router.put(\"/:id\", async (req, res) => {\r\n    try {\r\n      const [rowsUpdated, [updatedPost]] = await Post.update(\r\n        {\r\n          title: req.body.title,\r\n          body: req.body.body,\r\n        },\r\n        {\r\n          where: {\r\n            id: req.params.id,\r\n          },\r\n          returning: true,\r\n        }\r\n      );\r\n      if (rowsUpdated === 0) {\r\n        return res.status(404).json({ message: \"No post found with this id\" });\r\n      }\r\n      res.json(updatedPost);\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: \"Internal Server Error\" });\r\n    }\r\n  });\r\n  \r\n  // Delete a post\r\n  router.delete(\"/:id\", async (req, res) => {\r\n    try {\r\n      const rowsDeleted = await Post.destroy({\r\n        where: {\r\n          id: req.params.id,\r\n        },\r\n      });\r\n      if (rowsDeleted === 0) {\r\n        return res.status(404).json({ message: \"No post found with this id\" });\r\n      }\r\n      res.json({ message: \"Post successfully deleted\" });\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: \"Internal Server Error\" });\r\n    }\r\n  });\r\n  \r\n  module.exports = router;\r\n"],"file":"post-routes.dev.js"}