{"version":3,"sources":["post-routes.js"],"names":["router","require","Router","User","Post","Comment","get","req","res","dbPostData","regeneratorRuntime","async","_context","prev","next","awrap","findAll","attributes","include","model","as","sent","status","json","t0","console","log","error","message","stop","_context2","findOne","abrupt","post","_context3","create","title","body","session","user_id","id","_ref","_ref2","rowsUpdated","_ref2$","updatedPost","_context4","update","where","params","_slicedToArray","_context5","destroy","module","exports"],"mappings":"mnBAAA,IAAMA,OAASC,QAAQ,WAAWC,kBACFD,QAAQ,2BAAhCE,cAAAA,KAAMC,cAAAA,KAAMC,iBAAAA,QAIpBL,OAAOM,IAAI,IAAK,SAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAEaX,KAAKY,QAAQ,CACpCC,WAAY,CAAC,KAAM,QAAS,OAAQ,WACpCC,QAAS,CATTlB,CAWImB,MAAOd,QACPe,GAAI,WACJH,WAZFd,CAAAA,KAYqB,eAAgB,gBAR7B,KAAA,EAENM,EAFMG,EAAAS,KAYZb,EAAIc,OAAO,KAAKC,KAAKd,GAZTG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,MAAA,GAAAa,QAAAC,IAAAd,EAAAY,IAAAhB,EAAAc,OAAA,KAAAC,KAAA,CAAAI,MAAAf,EAAAY,GAAAI,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAhB,EAAAiB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAA7B,OAAAM,IAAA,OAAA,SAAAC,EAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAAAJ,mBAAAK,MAGEX,KAAO2B,QAAS,CAC5Bb,MAAAA,CAEIC,GAAAA,EAAAA,OAAOd,IAEPY,WAAAA,CAAAA,KAAU,QAAS,OAAA,WAHrBC,QADO,CAF2B,CA2BhCC,MAAOd,QA7BDe,GAAA,WAENX,WAFM,CAAA,KAAA,eAAA,gBAAA,KAAA,EAAA,GAGVQ,EAHUa,EAAAT,KAAA,CAAAS,EAAAhB,KAAA,EAAA,MAAA,OAAAN,EAAAc,OAAA,KAAAC,KAAA,CAAAK,QAAA,+BAAAE,EAAAE,OAAA,UAAA,KAAA,EAcZP,EAAAA,OAAAA,KAAQC,KAARjB,GAdYqB,EAAAhB,KAAA,GAAA,MAAA,KAAA,GAAAgB,EAAAjB,KAAA,GAAAiB,EAAAN,GAAAM,EAAA,MAAA,GAeWH,QAAAA,IAAAA,EAAAA,IAAFnB,EAAAc,OAArB,KAAAC,KAAA,CAAAI,MAAAG,EAAAN,GAAAI,UAfY,KAAA,GAAA,IAAA,MAAA,OAAAE,EAAAD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAAA7B,OAAAiC,KAAA,IAAA,SAAA1B,EAAAC,GAAA,IAAAyB,EAAA,OAAAvB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAAAJ,mBAAAK,MAAAX,KAAA+B,OAAA,CAmBhBC,MAAA7B,EAAA8B,KAAAD,MAgCQC,KAAM9B,EAAI8B,KAAKA,KA/BhB/B,QAAPC,EAAmB+B,QAAAC,WApBH,KAAA,EAAAN,EAAAC,EAAAb,KAoBGb,EAAAc,OAAA,KAAAC,KAAAU,GApBHC,EAAApB,KAAA,GAAA,MAAA,KAAA,EAAAoB,EAAArB,KAAA,EAAAqB,EAAAV,GAAAU,EAAA,MAAA,GAoBGT,QAAAE,MAAAO,EAAAV,IAAAhB,EAAAc,OAAA,KAAAC,KAAA,CAAAI,MAAA,0BApBH,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAwBRW,OAAAA,IAAAA,OAAO,SAAHjC,EAAWiC,GAAR,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnC,mBAAAC,MAAA,SAAAmC,GAAA,OAAA,OAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,KAAA,EAAA,OAAAgC,EAAAjC,KAAA,EAAAiC,EAAAhC,KAAA,EAAAJ,mBAAAK,MAE2BX,KAAA2C,OACpC7B,CAEIC,MAAAA,EAAOd,KAAAA,MACPe,KAAEb,EAAE8B,KAAAA,MAFN,CANkCW,MAFvB,CAmDPR,GAAIjC,EAAI0C,OAAOT,IAjDjB/B,WAFS,KAIJ,KAAA,EAAA,GAAAgC,EAAAK,EAAAzB,KAAAqB,EAAAQ,eAAAT,EAAA,GAETxB,EAFSyB,EAAA,GAAAE,EAAAM,eAAAR,EAAA,GAAA,GAEIG,EAFJD,EAAA,GAJI,IAAAD,EAIJ,OAAAG,EAAAd,OAAA,SAJIxB,EAAAc,OAAA,KAAAC,KAAA,CAAAK,QAAA,gCAIJkB,EAAAhC,KAAA,GAAA,MAAA,KAAA,GAuDTN,EAAIe,KAAKsB,GAvDAC,EAAAhC,KAAA,GAAA,MAAA,KAAA,GAAAgC,EAAAjC,KAAA,GAAAiC,EAAAtB,GAAAsB,EAAA,MAAA,GAYclB,QAAAA,MAAAA,EAAAA,IAAFpB,EAAAc,OAArB,KAAAC,KAAA,CAAAI,MAAA,0BAZS,KAAA,GAAA,IAAA,MAAA,OAAAmB,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAJI7B,OAAA,OAAA,OAAA,SAAAO,EAAAC,GAAA,OAAAE,mBAAAC,MAAA,SAAAwC,GAAA,OAAA,OAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,KAAA,EAAA,OAAAqC,EAAAtC,KAAA,EAAAsC,EAAArC,KAAA,EAAAJ,mBAAAK,MAqEaX,KAAKgD,QAAQ,CArE1BJ,MAAA,CAAAR,GAAAjC,EAAA0C,OAAAT,OAAA,KAAA,EAAA,GAsBCjB,IAtBD4B,EAAA9B,KAAA,OAAA8B,EAAAnB,OAAA,SAsBQL,EAAOL,OAAA,KAAAC,KAAIK,CAAAA,QAAAA,gCAtBnBuB,EAAArC,KAAA,EAAA,MAAA,KAAA,EA6EbN,EAAIe,KAAK,CAAEK,QAAS,8BA7EPuB,EAAArC,KAAA,GAAA,MAAA,KAAA,EAAAqC,EAAAtC,KAAA,EAAAsC,EAAA3B,GAAA2B,EAAA,MAAA,GAAA1B,QAAAE,MAAAwB,EAAA3B,IAAAhB,EAAAc,OAAA,KAAAC,KAAA,CAAAI,MAAA,0BAAA,KAAA,GAAA,IAAA,MAAA,OAAAwB,EAAAtB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAnBwB,OA0BAC,QAAAtD","file":"post-routes.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User, Post, Comment } = require(\"../../models/comment.js\");\r\n\r\n\r\n//get all the posts\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const dbPostData = await Post.findAll({\r\n      attributes: [\"id\", \"title\", \"body\", \"user_id\"],\r\n      include: [\r\n        {\r\n          model: Comment,\r\n          as: \"comments\",\r\n          attributes: [\"id\", \"comment_text\", \"user_id\"],\r\n        },\r\n      ],\r\n    });\r\n    res.status(200).json(dbPostData);\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n//get post by id\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const dbPostData = await Post.findOne({\r\n      where: {\r\n        id: req.params.id,\r\n      },\r\n      attributes: [\"id\", \"title\", \"body\", \"user_id\"],\r\n      include: [\r\n        {\r\n          model: Comment,\r\n          as: \"comments\",\r\n          attributes: [\"id\", \"comment_text\", \"user_id\"],\r\n        },\r\n      ],\r\n    });\r\n    if (!dbPostData) {\r\n      res.status(404).json({ message: \"No Post found with this id\" });\r\n      return;\r\n    }\r\n    res.status(200).json(dbPostData);\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Create a new post\r\nrouter.post(\"/\", async (req, res) => {\r\n    try {\r\n      const post = await Post.create({\r\n        title: req.body.title,\r\n        body: req.body.body,\r\n        user_id: req.session.user_id,\r\n      });\r\n      res.status(201).json(post);\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: \"Internal Server Error\" });\r\n    }\r\n  });\r\n  \r\n  // Update a post\r\n  router.put(\"/:id\", async (req, res) => {\r\n    try {\r\n      const [rowsUpdated, [updatedPost]] = await Post.update(\r\n        {\r\n          title: req.body.title,\r\n          body: req.body.body,\r\n        },\r\n        {\r\n          where: {\r\n            id: req.params.id,\r\n          },\r\n          returning: true,\r\n        }\r\n      );\r\n      if (rowsUpdated === 0) {\r\n        return res.status(404).json({ message: \"No post found with this id\" });\r\n      }\r\n      res.json(updatedPost);\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: \"Internal Server Error\" });\r\n    }\r\n  });\r\n  \r\n  // Delete a post\r\n  router.delete(\"/:id\", async (req, res) => {\r\n    try {\r\n      const rowsDeleted = await Post.destroy({\r\n        where: {\r\n          id: req.params.id,\r\n        },\r\n      });\r\n      if (rowsDeleted === 0) {\r\n        return res.status(404).json({ message: \"No post found with this id\" });\r\n      }\r\n      res.json({ message: \"Post successfully deleted\" });\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: \"Internal Server Error\" });\r\n    }\r\n  });\r\n  \r\n  module.exports = router;\r\n"]}