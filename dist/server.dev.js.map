{"version":3,"sources":["server.js"],"names":["express","require","path","controller","exphbs","sequelize","session","SequlizeStore","Store","sess","secret","cookie","resave","saveUninitialized","store","db","app","PORT","process","env","use","json","urlencoded","extended","join","__dirname","engine","set","sync","force","then","listen","console","log","on","err"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB,C,CACA;;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,eAAD,CAA1B,C,CACA;;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB,C,CACA;;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,qBAAD,CAAzB,C,CACA;;;AACA,IAAMK,OAAO,GAAGL,OAAO,CAAC,iBAAD,CAAvB;;AACA,IAAMM,aAAa,GAAGN,OAAO,CAAC,2BAAD,CAAP,CAAqCK,OAAO,CAACE,KAA7C,CAAtB,C,CAEA;;;AACA,IAAMC,IAAI,GAAG;AACXC,EAAAA,MAAM,EAAE,qBADG;AAEXC,EAAAA,MAAM,EAAE,EAFG;AAGXC,EAAAA,MAAM,EAAE,KAHG;AAIXC,EAAAA,iBAAiB,EAAE,IAJR;AAKXC,EAAAA,KAAK,EAAE,IAAIP,aAAJ,CAAkB;AACvBQ,IAAAA,EAAE,EAAEV;AADmB,GAAlB;AALI,CAAb,C,CASA;;AACA,IAAMW,GAAG,GAAGhB,OAAO,EAAnB;AACA,IAAMiB,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC,C,CAEA;;AACAD,GAAG,CAACI,GAAJ,CAAQpB,OAAO,CAACqB,IAAR,EAAR;AACAL,GAAG,CAACI,GAAJ,CAAQpB,OAAO,CAACsB,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAP,GAAG,CAACI,GAAJ,CAAQpB,OAAO,UAAP,CAAeE,IAAI,CAACsB,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAT,GAAG,CAACI,GAAJ,CAAQd,OAAO,CAACG,IAAD,CAAf,E,CAEA;;AACAO,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAajB,UAAb,E,CAEA;;AACAa,GAAG,CAACU,MAAJ,CAAW,YAAX,EAAyBtB,MAAM,CAACsB,MAAP,EAAzB;AACAV,GAAG,CAACW,GAAJ,CAAQ,aAAR,EAAuB,YAAvB;AAEAtB,SAAS,CAACuB,IAAV,CAAe;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAf,EAAiCC,IAAjC,CAAsC,YAAM;AAC1Cd,EAAAA,GAAG,CAACe,MAAJ,CAAWd,IAAX,EAAiB;AAAA,WAAMe,OAAO,CAACC,GAAR,iCAAqChB,IAArC,EAAN;AAAA,GAAjB;AACD,CAFD;AAIAC,OAAO,CAACgB,EAAR,CAAW,mBAAX,EAAgC,UAAUC,GAAV,EAAe;AAC7CH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,CAFD","sourcesContent":["const express = require(\"express\");\r\nconst path = require(\"path\");\r\n//paths\r\nconst controller = require(\"./controllers\");\r\n//handlebars\r\nconst exphbs = require(\"express-handlebars\");\r\n//Sequelize\r\nconst sequelize = require(\"./config/connection\");\r\n//Session\r\nconst session = require(\"express-session\");\r\nconst SequlizeStore = require(\"connect-session-sequelize\")(session.Store);\r\n\r\n//set up the actual session\r\nconst sess = {\r\n  secret: \"super secret secret\",\r\n  cookie: {},\r\n  resave: false,\r\n  saveUninitialized: true,\r\n  store: new SequlizeStore({\r\n    db: sequelize,\r\n  }),\r\n};\r\n//initialize the server\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3306;\r\n\r\n//middlewear\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\napp.use(session(sess));\r\n\r\n//use controllers\r\napp.use(\"/\", controller);\r\n\r\n//set handlebars as render engine\r\napp.engine(\"handlebars\", exphbs.engine());\r\napp.set(\"view engine\", \"handlebars\");\r\n\r\nsequelize.sync({ force: false }).then(() => {\r\n  app.listen(PORT, () => console.log(`Now listening on port ${PORT}`));\r\n});\r\n\r\nprocess.on('uncaughtException', function (err) {\r\n  console.log(err);\r\n});"],"file":"server.dev.js"}